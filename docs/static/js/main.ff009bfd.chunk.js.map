{"version":3,"sources":["components/simple-sheet/types.ts","components/simple-sheet/store/slices/layout.ts","components/simple-sheet/store/slices/selection.ts","components/simple-sheet/store/slices/cells.ts","components/simple-sheet/components/context-menu/index.tsx","components/simple-sheet/store/slices/contextMenu.ts","components/simple-sheet/store/rootReducer.ts","components/simple-sheet/store/index.ts","components/simple-sheet/utils/dom.ts","components/simple-sheet/utils/index.ts","components/simple-sheet/components/row-header-item/index.tsx","components/simple-sheet/constants.ts","components/simple-sheet/containers/row-header-item.tsx","components/simple-sheet/components/row-header-container/index.tsx","components/simple-sheet/components/col-header-item/index.tsx","components/simple-sheet/containers/col-header-item.tsx","components/simple-sheet/components/col-header-container/index.tsx","components/simple-sheet/containers/context-menu.tsx","components/simple-sheet/components/overlay/index.tsx","components/simple-sheet/containers/overlay.tsx","components/simple-sheet/components/cell/index.tsx","components/simple-sheet/containers/cell.tsx","components/simple-sheet/components/sheet-table/index.tsx","components/simple-sheet/containers/sheet-table.tsx","components/simple-sheet/index.tsx","app.tsx","reportWebVitals.ts","index.tsx"],"names":["CellType","layoutSlice","createSlice","name","initialState","rows","cols","reducers","setLayout","state","action","payload","setRowLayout","index","height","setColLayout","width","actions","selectionSlice","cells","selectRows","selectCols","selectCells","emptySelection","ContextMenuType","cellsSlice","setCells","splice","updateCell","cell","updateCellRawValue","raw","clearContent","selectedState","forEach","row","col","mergeCells","startCell","endCell","rowSpan","colSpan","i","j","undefined","type","PLACEHOLDER","ContextMenu","props","visible","top","left","onHide","onClickMergeCells","onClickClearContent","useEffect","onClick","e","target","closest","document","addEventListener","removeEventListener","menus","label","SINGLE_CELL","MULTIPLE_CELL","className","style","filter","includes","map","defaultProps","contextMenuSlice","show","hide","rootReducer","combineReducers","layout","layoutReducer","selection","selectionReducer","cellsReducer","contextMenu","contextMenuReducer","store","configureStore","reducer","getCellIndexByElement","el","td","parseInt","getAttribute","range","start","end","Array","from","length","_","numberToLetter","n","codePt","str","x","Math","floor","String","fromCharCode","setCaretToEnd","ele","pos","createRange","setStart","childNodes","collapse","window","getSelection","removeAllRanges","addRange","focus","setCaretPosition","innerText","isCellSelected","cellSelectedState","minR","minC","maxR","maxC","getCellByIdx","rowIdx","colIdx","getBoundaryCellsByCellSelectedState","prevL","prevR","prevT","prevB","startRow","startCol","endRow","endCol","ltCell","rbCell","l","r","t","b","maxB","curB","curR","minT","curT","minL","curL","RowHeaderItem","selected","onResize","onSelect","startYRef","useRef","startHeightRef","triggerRef","handleDragStart","useCallback","current","clientY","setPointerCapture","handleDrag","newHeight","handleDragEnd","handleClickHeader","classnames","active","ref","draggable","onDragStart","onDrag","onDragEnd","memo","RowHeaderItemContainer","dispatch","useDispatch","useSelector","rowLayout","indexOf","RowHeaderContainer","rowsLayout","idx","ColHeaderItem","startXRef","startWidthRef","clientX","newWidth","ColHeaderItemContainer","colLayout","ColHeaderContainer","colsLayout","ContextMenuContainer","hideContextMenu","onClearContent","onMergeCells","Overlay","cellSeletedState","selectionL","selectionR","selectionT","selectionB","OverlayContainer","Cell","onChange","contentWrapperRef","useState","edit","setEdit","handleDoubleClick","setTimeout","handleKeyPress","key","shiftKey","preventDefault","newValue","handleClickCell","handleBlur","onDoubleClick","data-row-idx","data-col-idx","onBlur","contentEditable","suppressContentEditableWarning","onKeyPress","CellContainer","onChangeCell","value","SheetTable","tableWidth","onSelectCells","onShowContextMenu","selectingStateRef","flag","handleMouseDownOnTable","button","setSelectedStateWhenMouseMoveOrUp","min","max","handleMouseMoveOnTable","handleMouseUpOnTable","handleContextMenuOnTable","pageX","pageY","handleMouseUp","onMouseDown","onMouseUp","onMouseMove","onContextMenu","cellItem","NORMAL","SheetTableContainer","reduce","sum","v","opts","showContextMenu","SHEET_DATA","rowCount","colCount","getDefaultSheetData","SimpleSheet","sheetData","parsed","parseSheetData","SimpleSheetWithStore","App","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ff009bfd.chunk.js","sourcesContent":["export interface SheetLayout {\n  cols: { width: number }[];\n  rows: { height: number }[];\n}\n\nexport type CellSelectedState = [\n  number,\n  number,\n  number,\n  number\n]; /* row1, col1, row2, col2 */\n\nexport interface SheetSelectedState {\n  cols: number[];\n  rows: number[];\n  cells: CellSelectedState | null;\n}\n\nexport type SparseCellDatas = (CellData | undefined)[][];\n\nexport enum CellType {\n  NORMAL,\n  PLACEHOLDER,\n}\nexport interface CellData {\n  row: number;\n  col: number;\n  raw?: string;\n  rowSpan: number;\n  colSpan: number;\n  type: CellType;\n}\nexport interface SheetData {\n  cells: {\n    row: number;\n    col: number;\n    raw: string;\n    rowSpan?: number;\n    colSpan?: number;\n  }[];\n  layout: SheetLayout;\n}\n\nexport type CellIndex = [number, number];\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nimport { SheetLayout } from '../../types';\n\nlet initialState: SheetLayout = {\n  rows: [],\n  cols: [],\n};\n\nconst layoutSlice = createSlice({\n  name: 'layout',\n  initialState,\n  reducers: {\n    setLayout(state, action: PayloadAction<SheetLayout>) {\n      state.rows = action.payload.rows;\n      state.cols = action.payload.cols;\n    },\n    setRowLayout(\n      state,\n      action: PayloadAction<{ index: number; height: number }>\n    ) {\n      const { index, height } = action.payload;\n      state.rows[index] = { height };\n    },\n    setColLayout(\n      state,\n      action: PayloadAction<{ index: number; width: number }>\n    ) {\n      const { index, width } = action.payload;\n      state.cols[index] = { width };\n    },\n  },\n});\n\nexport const { setLayout, setRowLayout, setColLayout } = layoutSlice.actions;\n\nexport default layoutSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nimport { CellSelectedState, SheetSelectedState } from '../../types';\n\nlet initialState: SheetSelectedState = {\n  rows: [],\n  cols: [],\n  cells: null,\n};\n\nconst selectionSlice = createSlice({\n  name: 'selection',\n  initialState,\n  reducers: {\n    selectRows(state, action: PayloadAction<number[]>) {\n      state.rows = action.payload;\n      state.cols = [];\n      state.cells = null;\n    },\n    selectCols(state, action: PayloadAction<number[]>) {\n      state.rows = [];\n      state.cols = action.payload;\n      state.cells = null;\n    },\n    selectCells(state, action: PayloadAction<CellSelectedState>) {\n      state.rows = [];\n      state.cols = [];\n      state.cells = action.payload;\n    },\n    emptySelection(state) {\n      state.rows = [];\n      state.cols = [];\n      state.cells = null;\n    },\n  },\n});\n\nexport const {\n  selectRows,\n  selectCols,\n  selectCells,\n  emptySelection,\n} = selectionSlice.actions;\n\nexport default selectionSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { CellData, CellSelectedState, CellType } from '../../types';\n\nlet initialState: CellData[][] = [];\n\nconst cellsSlice = createSlice({\n  name: 'cells',\n  initialState,\n  reducers: {\n    setCells(state, action: PayloadAction<CellData[][]>) {\n      state.splice(0, 0, ...action.payload);\n    },\n    updateCell(\n      state,\n      action: PayloadAction<{ index: [number, number]; cell: CellData }>\n    ) {\n      const { index, cell } = action.payload;\n      state[index[0]][index[1]] = cell;\n    },\n    updateCellRawValue(\n      state,\n      action: PayloadAction<{ index: [number, number]; raw: string }>\n    ) {\n      const { index, raw } = action.payload;\n      state[index[0]][index[1]].raw = raw;\n    },\n    clearContent(state, action: PayloadAction<CellSelectedState>) {\n      const selectedState = action.payload;\n      state.forEach((row) => {\n        row.forEach((cell) => {\n          const { row, col } = cell;\n          if (\n            cell != null &&\n            row >= selectedState[0] &&\n            row <= selectedState[2] &&\n            col >= selectedState[1] &&\n            col <= selectedState[3]\n          ) {\n            cell.raw = '';\n          }\n          return cell;\n        });\n      });\n    },\n    mergeCells(state, action: PayloadAction<CellSelectedState>) {\n      const selectedState = action.payload;\n      const startCell = state[selectedState[0]][selectedState[1]];\n      const endCell = state[selectedState[2]][selectedState[3]];\n\n      const rowSpan = endCell.row + (endCell.rowSpan || 1) - startCell.row;\n      const colSpan = endCell.col + (endCell.colSpan || 1) - startCell.col;\n\n      for (let i = startCell.row; i < startCell.row + rowSpan; i++) {\n        for (let j = startCell.col; j < startCell.col + colSpan; j++) {\n          if (i !== startCell.row || j !== startCell.col) {\n            state[i][j] = {\n              ...state[i][j],\n              rowSpan: 1,\n              colSpan: 1,\n              raw: undefined,\n              type: CellType.PLACEHOLDER,\n            };\n          }\n        }\n      }\n      startCell.rowSpan = rowSpan;\n      startCell.colSpan = colSpan;\n    },\n  },\n});\n\nexport default cellsSlice.reducer;\n\nexport const {\n  setCells,\n  updateCell,\n  clearContent,\n  mergeCells,\n  updateCellRawValue,\n} = cellsSlice.actions;\n","import React, { useEffect } from 'react';\n\nimport './style.scss';\n\nexport enum ContextMenuType {\n  'SINGLE_CELL',\n  'MULTIPLE_CELL',\n}\n\nexport interface ContextMenuProps {\n  visible?: boolean;\n  onHide?: () => void;\n  top: number;\n  left: number;\n  type: ContextMenuType;\n  onClickMergeCells?: () => void;\n  onClickClearContent?: () => void;\n}\n\nconst ContextMenu = (props: ContextMenuProps) => {\n  const {\n    visible,\n    type,\n    top,\n    left,\n    onHide,\n    onClickMergeCells,\n    onClickClearContent,\n  } = props;\n  useEffect(() => {\n    const onClick = (e: MouseEvent) => {\n      if (visible) {\n        if (e.target != null) {\n          const node = (e.target as HTMLElement).closest('.sheet-context-menu');\n          if (!node) {\n            onHide && onHide();\n          }\n        } else {\n          onHide && onHide();\n        }\n      }\n    };\n\n    document.addEventListener('click', onClick);\n    return () => {\n      document.removeEventListener('click', onClick);\n    };\n  }, [onHide, visible]);\n\n  const menus = [\n    {\n      label: '清空内容',\n      type: [ContextMenuType.SINGLE_CELL, ContextMenuType.MULTIPLE_CELL],\n      onClick: () => {\n        onClickClearContent && onClickClearContent();\n        onHide && onHide();\n      },\n    },\n    {\n      label: '合并单元格',\n      type: [ContextMenuType.MULTIPLE_CELL],\n      onClick: () => {\n        onClickMergeCells && onClickMergeCells();\n        onHide && onHide();\n      },\n    },\n  ];\n\n  if (visible) {\n    return (\n      <div className=\"sheet-context-menu\" style={{ top: top, left: left }}>\n        {menus\n          .filter((e) => e.type.includes(type))\n          .map((e) => (\n            <div key={e.label} onClick={e.onClick} className=\"menu-item\">\n              {e.label}\n            </div>\n          ))}\n      </div>\n    );\n  } else {\n    return null;\n  }\n};\n\nContextMenu.defaultProps = {\n  visible: false,\n  onHide() {},\n};\n\nexport default ContextMenu;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nimport { ContextMenuType } from '../../components/context-menu';\n\nlet initialState: {\n  visible: boolean;\n  type: ContextMenuType;\n  top: number;\n  left: number;\n} = {\n  visible: false,\n  type: ContextMenuType.SINGLE_CELL,\n  top: 0,\n  left: 0,\n};\n\nconst contextMenuSlice = createSlice({\n  name: 'contextMenu',\n  initialState,\n  reducers: {\n    show(\n      state,\n      action: PayloadAction<{\n        type: ContextMenuType;\n        top: number;\n        left: number;\n      }>\n    ) {\n      const { type, top, left } = action.payload;\n      state.visible = true;\n      state.type = type;\n      state.top = top;\n      state.left = left;\n    },\n    hide(state) {\n      state.visible = false;\n    },\n  },\n});\n\nexport const { show, hide } = contextMenuSlice.actions;\n\nexport default contextMenuSlice.reducer;\n","import { combineReducers } from '@reduxjs/toolkit';\n\nimport layoutReducer from './slices/layout';\nimport selectionReducer from './slices/selection';\nimport cellsReducer from './slices/cells';\nimport contextMenuReducer from './slices/contextMenu';\n\nconst rootReducer = combineReducers({\n  layout: layoutReducer,\n  selection: selectionReducer,\n  cells: cellsReducer,\n  contextMenu: contextMenuReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport rootReducer from './rootReducer';\n\nconst store = configureStore({\n  reducer: rootReducer,\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type { RootState } from './rootReducer';\n\nexport default store;\n","export const getCellIndexByElement = (el: HTMLElement): [number, number] => {\n  if (el == null) {\n    return [-1, -1];\n  }\n\n  const td = el.closest('td');\n\n  const rowIdx = parseInt(td?.getAttribute('data-row-idx') || '-1', 10);\n  const colIdx = parseInt(td?.getAttribute('data-col-idx') || '-1', 10);\n\n  return [rowIdx, colIdx];\n};\n","import { defaultCellHeight, defaultCellWidth } from '../constants';\nimport {\n  CellData,\n  CellSelectedState,\n  CellType,\n  SheetData,\n  SheetLayout,\n} from '../types';\n\nexport * from './dom';\n\nexport const range = (start: number, end: number) => {\n  return Array.from({ length: end - start + 1 }, (_, i) => start + i);\n};\n\nconst chr = (codePt: number): string => {\n  if (codePt > 0xffff) {\n    codePt -= 0x10000;\n    return String.fromCharCode(\n      0xd800 + (codePt >> 10),\n      0xdc00 + (codePt & 0x3ff)\n    );\n  }\n  return String.fromCharCode(codePt);\n};\n\nexport const numberToLetter = (n: number): string => {\n  let str = '';\n  while (n > 0) {\n    const x = Math.floor((n - 1) / 26);\n    const r = (n - 1) % 26;\n    str = chr(65 + r) + str;\n    n = x;\n  }\n  return str;\n};\n\nexport const clearSelection = () => {\n  const selection = window.getSelection();\n  if (selection != null) {\n    selection.removeAllRanges();\n  }\n};\n\nexport const setCaretPosition = (ele: HTMLElement, pos: number) => {\n  const range = document.createRange();\n  range.setStart(ele.childNodes[0] || ele, pos);\n  range.collapse(true);\n\n  const selection = window.getSelection();\n  if (selection != null) {\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n\n  ele.focus();\n};\n\nexport const setCaretToEnd = (ele: HTMLElement) => {\n  const pos = ele.innerText.length;\n  setCaretPosition(ele, pos);\n};\n\nexport const getDefaultLayout = (\n  rowCount: number,\n  colCount: number\n): SheetLayout => {\n  return {\n    cols: range(1, colCount).map((e) => ({\n      width: defaultCellWidth,\n    })),\n    rows: range(1, rowCount).map((e) => ({\n      height: defaultCellHeight,\n    })),\n  };\n};\n\n/**\n * detect if cell is selected\n */\nexport const isCellSelected = (\n  cell: { col: number; row: number },\n  cellSelectedState: CellSelectedState\n) => {\n  const [minR, minC, maxR, maxC] = cellSelectedState;\n  const { row, col } = cell;\n  return row >= minR && row <= maxR && col >= minC && col <= maxC;\n};\n\n/**\n * converge to find really cell item\n */\nexport const getCellByIdx = (\n  rowIdx: number,\n  colIdx: number,\n  cells: CellData[][]\n) => {\n  if (cells[rowIdx][colIdx].type !== CellType.PLACEHOLDER) {\n    return cells[rowIdx][colIdx];\n  }\n\n  for (let i = colIdx; i >= 0; i--) {\n    const cell = cells[rowIdx][i];\n    if (cell.type !== CellType.PLACEHOLDER) {\n      if (cell.colSpan + cell.col - 1 >= colIdx) {\n        colIdx = cell.col;\n      }\n      break;\n    }\n  }\n\n  for (let i = rowIdx; i >= 0; i--) {\n    const cell = cells[i][colIdx];\n    if (cell.type !== CellType.PLACEHOLDER) {\n      if (cell.rowSpan + cell.row - 1 >= rowIdx) {\n        rowIdx = cell.row;\n      }\n      break;\n    }\n  }\n\n  return cells[rowIdx][colIdx];\n};\n\nexport const getBoundaryCellsByCellSelectedState = (\n  cells: CellData[][],\n  state: CellSelectedState\n) => {\n  const [startRow, startCol, endRow, endCol] = state;\n  let ltCell = getCellByIdx(startRow, startCol, cells);\n  let rbCell = getCellByIdx(endRow, endCol, cells);\n\n  let l = ltCell.col,\n    r = rbCell.col + rbCell.colSpan - 1,\n    t = ltCell.row,\n    b = rbCell.row + rbCell.rowSpan - 1;\n\n  let prevL, prevR, prevT, prevB;\n\n  while (prevL !== l || prevT !== t || prevR !== r || prevB !== b) {\n    prevT = t;\n    prevR = r;\n    prevB = b;\n    prevL = l;\n\n    // loop from lb -> rb -> rt -> lt -> lb\n    let maxB = b;\n    for (let i = l; i <= r; i++) {\n      const cell = getCellByIdx(b, i, cells);\n      const curB = cell.row + cell.rowSpan - 1;\n      if (curB > maxB) {\n        maxB = curB;\n      }\n    }\n    b = maxB;\n\n    let maxR = r;\n    for (let i = b; i >= t; i--) {\n      const cell = getCellByIdx(i, r, cells);\n      const curR = cell.col + cell.colSpan - 1;\n      if (curR > maxR) {\n        maxR = curR;\n      }\n    }\n    r = maxR;\n\n    let minT = t;\n    for (let i = r; i >= l; i--) {\n      const cell = getCellByIdx(t, i, cells);\n      const curT = cell.row;\n      if (curT < minT) {\n        minT = curT;\n      }\n    }\n    t = minT;\n\n    let minL = l;\n    for (let i = t; i <= b; i++) {\n      const cell = getCellByIdx(i, l, cells);\n      const curL = cell.col;\n      if (curL < minL) {\n        minL = curL;\n      }\n    }\n    l = minL;\n  }\n\n  ltCell = getCellByIdx(t, l, cells);\n  rbCell = getCellByIdx(b, r, cells);\n\n  return [ltCell, rbCell];\n};\n\nexport const getDefaultSheetData = (): SheetData => {\n  return {\n    layout: getDefaultLayout(5, 4),\n    cells: [\n      {\n        row: 0,\n        col: 0,\n        raw: '日期',\n      },\n      {\n        row: 0,\n        col: 1,\n        raw: '收支类型',\n      },\n      {\n        row: 0,\n        col: 2,\n        raw: '说明',\n      },\n      {\n        row: 0,\n        col: 3,\n        raw: '金额',\n      },\n      {\n        row: 1,\n        col: 0,\n        raw: '2020-05-06',\n      },\n      {\n        row: 1,\n        col: 1,\n        raw: '团队聚餐',\n      },\n      {\n        row: 1,\n        col: 2,\n        raw: '说明文案A',\n      },\n      {\n        row: 1,\n        col: 3,\n        raw: '1025',\n      },\n      {\n        row: 2,\n        col: 0,\n        raw: '2020-05-07',\n        rowSpan: 2,\n      },\n      {\n        row: 2,\n        col: 1,\n        raw: '办公用品',\n      },\n      {\n        row: 2,\n        col: 2,\n        raw: '说明文案B',\n      },\n      {\n        row: 2,\n        col: 3,\n        raw: '860',\n      },\n      {\n        row: 3,\n        col: 1,\n        raw: '团队建设',\n      },\n      {\n        row: 3,\n        col: 2,\n        raw: '说明文案C',\n      },\n      {\n        row: 3,\n        col: 3,\n        raw: '1160',\n      },\n\n      {\n        row: 4,\n        col: 0,\n        raw: '记录人：王小明',\n        colSpan: 2,\n      },\n      {\n        row: 4,\n        col: 2,\n        raw: '总计：',\n      },\n      {\n        row: 4,\n        col: 3,\n        raw: '',\n      },\n    ],\n  };\n};\n\nexport const parseSheetData = (sheetData: SheetData): CellData[][] => {\n  const { layout, cells } = sheetData;\n  let parsed = Array.from({ length: layout.rows.length }, (_, row) =>\n    Array.from({ length: layout.cols.length }, (_, col) => ({\n      row: row,\n      col: col,\n      rowSpan: 1,\n      colSpan: 1,\n    }))\n  ) as CellData[][];\n\n  cells.forEach((cell) => {\n    const { row, col, rowSpan = 1, colSpan = 1 } = cell;\n    parsed[row][col] = {\n      ...cell,\n      row,\n      col,\n      rowSpan,\n      colSpan,\n      type: CellType.NORMAL,\n    };\n\n    if (rowSpan > 1 || colSpan > 1) {\n      for (let i = row; i <= row + rowSpan - 1; i++) {\n        for (let j = col; j <= col + colSpan - 1; j++) {\n          if (i !== row || j !== col) {\n            parsed[i][j].type = CellType.PLACEHOLDER;\n          }\n        }\n      }\n    }\n  });\n\n  return parsed;\n};\n","import React, { memo, useCallback, useRef } from 'react';\nimport classnames from 'classnames';\nimport { defaultCellHeight } from '../../constants';\n\nimport './style.scss';\nexport interface RowHeaderItemProps {\n  index: number;\n  selected: boolean;\n  height: number;\n  onResize: (height: number) => void;\n  onSelect: () => void;\n}\n\nconst RowHeaderItem = (props: RowHeaderItemProps) => {\n  const { index, selected, height, onResize, onSelect } = props;\n\n  const startYRef = useRef<number>(0);\n  const startHeightRef = useRef<number>(height);\n  const triggerRef = useRef<HTMLDivElement>(null);\n\n  const handleDragStart = useCallback(\n    (e: React.DragEvent) => {\n      startYRef.current = e.clientY;\n      startHeightRef.current = height;\n      triggerRef.current?.setPointerCapture(1);\n    },\n    [height]\n  );\n\n  const handleDrag = useCallback(\n    (e: React.DragEvent) => {\n      const newHeight = e.clientY - startYRef.current + startHeightRef.current;\n      if (newHeight < defaultCellHeight) return;\n      onResize(newHeight);\n    },\n    [onResize]\n  );\n\n  const handleDragEnd = useCallback(\n    (e: React.DragEvent) => {\n      const newHeight = e.clientY - startYRef.current + startHeightRef.current;\n      if (newHeight < defaultCellHeight) return;\n      onResize(newHeight);\n    },\n    [onResize]\n  );\n\n  const handleClickHeader = useCallback(() => {\n    onSelect();\n  }, [onSelect]);\n\n  return (\n    <div\n      className={classnames({\n        'row-header-item': true,\n        active: selected,\n      })}\n      style={{ height: height }}\n      onClick={handleClickHeader}\n    >\n      {index + 1}\n      <div\n        ref={triggerRef}\n        draggable=\"true\"\n        className=\"row-header-trigger\"\n        onDragStart={handleDragStart}\n        onDrag={handleDrag}\n        onDragEnd={handleDragEnd}\n      ></div>\n    </div>\n  );\n};\n\nexport default memo(RowHeaderItem);\n","export const defaultCellWidth = 80;\nexport const defaultCellHeight = 36;\n","import React, { memo, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { RootState } from '../store';\n\nimport RowHeaderItem from '../components/row-header-item';\nimport { setRowLayout } from '../store/slices/layout';\nimport { selectRows } from '../store/slices/selection';\n\nconst RowHeaderItemContainer = (props: { index: number }) => {\n  const { index } = props;\n  const dispatch = useDispatch();\n  const selection = useSelector((state: RootState) => state.selection.rows);\n  const rowLayout = useSelector((state: RootState) => state.layout.rows[index]);\n\n  const selected = selection.indexOf(index) > -1;\n\n  const onResize = useCallback(\n    (height) => {\n      dispatch(\n        setRowLayout({\n          index,\n          height: height,\n        })\n      );\n    },\n    [dispatch, index]\n  );\n\n  const onSelect = useCallback(() => {\n    dispatch(selectRows([index]));\n  }, [dispatch, index]);\n\n  return (\n    <RowHeaderItem\n      index={index}\n      height={rowLayout.height}\n      selected={selected}\n      onResize={onResize}\n      onSelect={onSelect}\n    />\n  );\n};\n\nexport default memo(RowHeaderItemContainer);\n","import React, { memo } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport RowHeaderItem from '../../containers/row-header-item';\n\nimport './style.scss';\nimport { RootState } from '../../store';\n\nexport interface RowHeaderContainerProps {}\n\nconst RowHeaderContainer = (props: RowHeaderContainerProps) => {\n  const rowsLayout = useSelector((state: RootState) => state.layout.rows);\n  return (\n    <div className=\"rows-header-container\">\n      {rowsLayout.map((row, idx) => (\n        <RowHeaderItem key={idx} index={idx} />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(RowHeaderContainer);\n","import React, { memo, useCallback, useRef } from 'react';\nimport classnames from 'classnames';\nimport { numberToLetter } from '../../utils';\n\nimport { defaultCellWidth } from '../../constants';\n\nimport './style.scss';\nexport interface ColHeaderItemProps {\n  index: number;\n  selected: boolean;\n  width: number;\n  onResize: (width: number) => void;\n  onSelect: () => void;\n}\n\nconst ColHeaderItem = (props: ColHeaderItemProps) => {\n  const { index, selected, width, onResize, onSelect } = props;\n\n  const startXRef = useRef<number>(0);\n  const startWidthRef = useRef<number>(width);\n  const triggerRef = useRef<HTMLDivElement>(null);\n\n  const handleDragStart = useCallback(\n    (e: React.DragEvent) => {\n      startXRef.current = e.clientX;\n      startWidthRef.current = width;\n      triggerRef.current?.setPointerCapture(1);\n    },\n    [width]\n  );\n\n  const handleDrag = useCallback(\n    (e: React.DragEvent) => {\n      const newWidth = e.clientX - startXRef.current + startWidthRef.current;\n      if (newWidth < defaultCellWidth) return;\n      onResize(newWidth);\n    },\n    [onResize]\n  );\n\n  const handleDragEnd = useCallback(\n    (e: React.DragEvent) => {\n      const newWidth = e.clientX - startXRef.current + startWidthRef.current;\n      if (newWidth < defaultCellWidth) return;\n      onResize(newWidth);\n    },\n    [onResize]\n  );\n\n  const handleClickHeader = useCallback(() => {\n    onSelect();\n  }, [onSelect]);\n\n  return (\n    <div\n      className={classnames({\n        'col-header-item': true,\n        active: selected,\n      })}\n      onClick={handleClickHeader}\n      style={{ width: width }}\n    >\n      {numberToLetter(index + 1)}\n      <div\n        ref={triggerRef}\n        draggable=\"true\"\n        className=\"col-header-trigger\"\n        onDragStart={handleDragStart}\n        onDrag={handleDrag}\n        onDragEnd={handleDragEnd}\n      ></div>\n    </div>\n  );\n};\n\nexport default memo(ColHeaderItem);\n","import React, { memo, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { RootState } from '../store';\n\nimport ColHeaderItem from '../components/col-header-item';\nimport { setColLayout } from '../store/slices/layout';\nimport { selectCols } from '../store/slices/selection';\n\nconst ColHeaderItemContainer = (props: { index: number }) => {\n  const { index } = props;\n  const dispatch = useDispatch();\n  const selection = useSelector((state: RootState) => state.selection.cols);\n  const colLayout = useSelector((state: RootState) => state.layout.cols[index]);\n\n  const selected = selection.indexOf(index) > -1;\n\n  const onResize = useCallback(\n    (width) => {\n      dispatch(\n        setColLayout({\n          index,\n          width: width,\n        })\n      );\n    },\n    [dispatch, index]\n  );\n\n  const onSelect = useCallback(() => {\n    dispatch(selectCols([index]));\n  }, [dispatch, index]);\n\n  return (\n    <ColHeaderItem\n      index={index}\n      width={colLayout.width}\n      selected={selected}\n      onResize={onResize}\n      onSelect={onSelect}\n    />\n  );\n};\n\nexport default memo(ColHeaderItemContainer);\n","import React, { memo } from 'react';\nimport { useSelector } from 'react-redux';\nimport ColHeaderItem from '../../containers/col-header-item';\nimport { RootState } from '../../store';\n\nimport './style.scss';\nexport interface ColHeaderContainerProps {}\n\nconst ColHeaderContainer = (props: ColHeaderContainerProps) => {\n  const colsLayout = useSelector((state: RootState) => state.layout.cols);\n  return (\n    <div className=\"cols-header-container\">\n      {colsLayout.map((col, idx) => (\n        <ColHeaderItem key={idx} index={idx} />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(ColHeaderContainer);\n","import React, { memo, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { RootState } from '../store';\nimport { hide as hideContextMenu } from '../store/slices/contextMenu';\nimport { clearContent, mergeCells } from '../store/slices/cells';\nimport ContextMenu from '../components/context-menu';\n\nconst ContextMenuContainer = () => {\n  const { left, top, visible, type } = useSelector(\n    (state: RootState) => state.contextMenu\n  );\n  const selection = useSelector((state: RootState) => state.selection);\n  const dispatch = useDispatch();\n\n  const onHide = useCallback(() => {\n    dispatch(hideContextMenu());\n  }, [dispatch]);\n\n  const onClearContent = useCallback(() => {\n    const cells = selection.cells;\n    dispatch(clearContent(cells));\n  }, [selection.cells, dispatch]);\n\n  const onMergeCells = useCallback(() => {\n    const cells = selection.cells;\n    dispatch(mergeCells(cells));\n  }, [selection.cells, dispatch]);\n\n  return (\n    <ContextMenu\n      onHide={onHide}\n      type={type}\n      left={left}\n      top={top}\n      visible={visible}\n      onClickClearContent={onClearContent}\n      onClickMergeCells={onMergeCells}\n    />\n  );\n};\n\nexport default memo(ContextMenuContainer);\n","import React, { memo } from 'react';\n\nimport { CellData, SheetLayout, SheetSelectedState } from '../../types';\nimport { getBoundaryCellsByCellSelectedState } from '../../utils';\n\nimport './style.scss';\n\nexport interface OverlayProps {\n  cells: CellData[][];\n  selection: SheetSelectedState;\n  layout: SheetLayout;\n}\n\nconst Overlay = (props: OverlayProps) => {\n  const { cells, selection, layout } = props;\n  const { cells: cellSeletedState } = selection;\n\n  if (cellSeletedState != null) {\n    const [startCell, endCell] = getBoundaryCellsByCellSelectedState(\n      cells,\n      cellSeletedState\n    );\n\n    if (startCell == null || endCell == null) return null;\n\n    const { row: minR, col: minC } = startCell;\n    let { row: maxR, col: maxC } = endCell;\n\n    maxR = maxR + (endCell.rowSpan || 1) - 1;\n    maxC = maxC + (endCell.colSpan || 1) - 1;\n\n    let selectionL = 0;\n    let selectionR = 0;\n    let selectionT = 0;\n    let selectionB = 0;\n    for (let i = 0; i < layout.cols.length; i++) {\n      const col = layout.cols[i];\n      if (i < minC) {\n        selectionL += col.width;\n      }\n      if (i <= maxC) {\n        selectionR += col.width;\n      } else {\n        break;\n      }\n    }\n\n    for (let i = 0; i < layout.rows.length; i++) {\n      const row = layout.rows[i];\n      if (i < minR) {\n        selectionT += row.height;\n      }\n      if (i <= maxR) {\n        selectionB += row.height;\n      } else {\n        break;\n      }\n    }\n\n    return (\n      <div className=\"sheet-overlay\">\n        <div\n          className=\"selection-l\"\n          style={{\n            left: selectionL,\n            top: selectionT,\n            height: selectionB - selectionT,\n          }}\n        ></div>\n        <div\n          className=\"selection-r\"\n          style={{\n            left: selectionR,\n            top: selectionT,\n            height: selectionB - selectionT,\n          }}\n        ></div>\n        <div\n          className=\"selection-t\"\n          style={{\n            left: selectionL,\n            top: selectionT,\n            width: selectionR - selectionL,\n          }}\n        ></div>\n        <div\n          className=\"selection-b\"\n          style={{\n            left: selectionL,\n            top: selectionB,\n            width: selectionR - selectionL,\n          }}\n        ></div>\n      </div>\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default memo(Overlay);\n","import React, { memo } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { RootState } from '../store';\n\nimport Overlay from '../components/overlay';\n\nconst OverlayContainer = () => {\n  const cells = useSelector((state: RootState) => state.cells);\n\n  const selection = useSelector((state: RootState) => state.selection);\n  const layout = useSelector((state: RootState) => state.layout);\n\n  return <Overlay cells={cells} selection={selection} layout={layout} />;\n};\n\nexport default memo(OverlayContainer);\n","import React, {\n  useState,\n  useRef,\n  CSSProperties,\n  KeyboardEvent,\n  useCallback,\n  memo,\n} from 'react';\nimport classnames from 'classnames';\n\nimport { setCaretToEnd } from '../../utils';\nimport { CellData } from '../../types';\n\nimport './style.scss';\n\nexport interface CellProps {\n  raw: string;\n  style?: CSSProperties;\n  cell: CellData;\n  selected: boolean;\n  onChange: (value: string) => void;\n  onSelect?: (rowIdx: number, colIdx: number) => void;\n}\n\nconst Cell = (props: CellProps) => {\n  const { raw, style, cell, selected, onChange, onSelect } = props;\n  const contentWrapperRef = useRef<HTMLInputElement>(null);\n\n  const [edit, setEdit] = useState(false);\n\n  const handleDoubleClick = useCallback(() => {\n    if (!edit) {\n      setEdit(true);\n      setTimeout(() => {\n        setCaretToEnd(contentWrapperRef.current as HTMLElement);\n      }, 0);\n    }\n  }, [edit]);\n\n  const handleKeyPress = useCallback(\n    (e: KeyboardEvent) => {\n      if (e.key === 'Enter' && !e.shiftKey) {\n        e.preventDefault();\n        setEdit(false);\n        if (contentWrapperRef.current) {\n          const newValue = contentWrapperRef.current.innerText;\n          if (newValue !== raw) {\n            onChange(newValue);\n          }\n        }\n      }\n    },\n    [onChange, raw]\n  );\n\n  const handleClickCell = useCallback(() => {\n    onSelect && onSelect(cell.row, cell.col);\n  }, [cell.row, cell.col, onSelect]);\n\n  const handleBlur = useCallback(() => {\n    if (edit) {\n      setEdit(false);\n      if (contentWrapperRef.current) {\n        const newValue = contentWrapperRef.current.innerText;\n        if (newValue !== raw) {\n          onChange(newValue);\n        }\n      }\n    }\n  }, [edit, raw, onChange]);\n\n  return (\n    <td\n      onDoubleClick={handleDoubleClick}\n      onClick={handleClickCell}\n      className={classnames({\n        cell: true,\n        selected: selected,\n      })}\n      style={style}\n      rowSpan={cell.rowSpan}\n      colSpan={cell.colSpan}\n      data-row-idx={cell.row}\n      data-col-idx={cell.col}\n    >\n      <div\n        className={classnames({\n          'cell-content-wrapper': true,\n          active: edit,\n        })}\n        onBlur={handleBlur}\n        ref={contentWrapperRef}\n        contentEditable={edit}\n        suppressContentEditableWarning={true}\n        onKeyPress={handleKeyPress}\n      >\n        {cell.raw}\n      </div>\n    </td>\n  );\n};\n\nexport default memo(Cell);\n","import React, { memo, useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport Cell, { CellProps } from '../components/cell';\nimport { updateCellRawValue } from '../store/slices/cells';\n\nexport type CellContainerProps = Omit<CellProps, 'onChange'>;\n\nconst CellContainer = (props: CellContainerProps) => {\n  const { row, col } = props.cell;\n  const dispatch = useDispatch();\n  const onChangeCell = useCallback(\n    (value) => {\n      dispatch(\n        updateCellRawValue({\n          index: [row, col],\n          raw: value,\n        })\n      );\n    },\n    [row, col, dispatch]\n  );\n\n  return <Cell {...props} onChange={onChangeCell} />;\n};\n\nexport default memo(CellContainer);\n","import React, { memo, useCallback, useEffect, useRef } from 'react';\nimport {\n  CellData,\n  CellSelectedState,\n  CellType,\n  SheetLayout,\n  SheetSelectedState,\n} from '../../types';\nimport {\n  getBoundaryCellsByCellSelectedState,\n  getCellIndexByElement,\n  isCellSelected,\n} from '../../utils';\n\nimport Cell from '../../containers/cell';\nimport { ContextMenuType } from '../context-menu';\n\nexport interface SheetTableProps {\n  tableWidth: number;\n  layout: SheetLayout;\n  cells: CellData[][];\n  selection: SheetSelectedState;\n  onSelectCells: (state: CellSelectedState) => void;\n  onShowContextMenu: (opts: {\n    type: ContextMenuType;\n    top: number;\n    left: number;\n  }) => void;\n}\n\nconst SheetTable = (props: SheetTableProps) => {\n  const {\n    tableWidth,\n    layout,\n    selection,\n    cells,\n    onSelectCells,\n    onShowContextMenu,\n  } = props;\n\n  const selectingStateRef = useRef({\n    flag: false,\n    startRow: -1,\n    startCol: -1,\n  });\n\n  const handleMouseDownOnTable = useCallback(\n    (e: React.MouseEvent<HTMLElement>) => {\n      if (!selectingStateRef.current.flag) {\n        const [rowIdx, colIdx] = getCellIndexByElement(e.target as HTMLElement);\n        if (rowIdx === -1 || colIdx === -1) {\n          return;\n        }\n        if (\n          e.button === 0 ||\n          (e.button === 2 &&\n            (selection.cells == null ||\n              rowIdx < selection.cells[0] ||\n              rowIdx > selection.cells[2] ||\n              colIdx < selection.cells[1] ||\n              colIdx > selection.cells[3]))\n        ) {\n          // select single cell when primary click or secondary button click out of current selection\n          onSelectCells([rowIdx, colIdx, rowIdx, colIdx]);\n        }\n\n        if (e.button === 0) {\n          // only start selection when primary button click\n          selectingStateRef.current = {\n            flag: true,\n            startRow: rowIdx,\n            startCol: colIdx,\n          };\n        }\n      }\n    },\n    [selection.cells, onSelectCells]\n  );\n\n  const setSelectedStateWhenMouseMoveOrUp = useCallback(\n    (rowIdx: number, colIdx: number) => {\n      const { startRow, startCol } = selectingStateRef.current;\n      const [startCell, endCell] = getBoundaryCellsByCellSelectedState(cells, [\n        Math.min(rowIdx, startRow),\n        Math.min(colIdx, startCol),\n        Math.max(rowIdx, startRow),\n        Math.max(colIdx, startCol),\n      ]);\n\n      onSelectCells([\n        startCell.row,\n        startCell.col,\n        endCell.row + endCell.rowSpan - 1,\n        endCell.col + endCell.colSpan - 1,\n      ]);\n    },\n    [cells, onSelectCells]\n  );\n\n  const handleMouseMoveOnTable = useCallback(\n    (e: React.MouseEvent<HTMLElement>) => {\n      if (selectingStateRef.current.flag) {\n        const [rowIdx, colIdx] = getCellIndexByElement(e.target as HTMLElement);\n        if (rowIdx === -1 || colIdx === -1) {\n          return;\n        }\n        setSelectedStateWhenMouseMoveOrUp(rowIdx, colIdx);\n      }\n    },\n    [setSelectedStateWhenMouseMoveOrUp]\n  );\n\n  const handleMouseUpOnTable = useCallback(\n    (e: React.MouseEvent<HTMLElement>) => {\n      if (selectingStateRef.current.flag) {\n        const [rowIdx, colIdx] = getCellIndexByElement(e.target as HTMLElement);\n        if (rowIdx === -1 || colIdx === -1) {\n          return;\n        }\n        setSelectedStateWhenMouseMoveOrUp(rowIdx, colIdx);\n        selectingStateRef.current.flag = false;\n      }\n    },\n    [setSelectedStateWhenMouseMoveOrUp]\n  );\n\n  const handleContextMenuOnTable = useCallback(\n    (e: React.MouseEvent<HTMLElement>) => {\n      e.preventDefault();\n\n      if (selection.cells != null) {\n        // has selection\n        if (\n          selection.cells[0] === selection.cells[2] &&\n          selection.cells[1] === selection.cells[3]\n        ) {\n          // has single cell selected\n          onShowContextMenu({\n            left: e.pageX,\n            top: e.pageY,\n            type: ContextMenuType.SINGLE_CELL,\n          });\n        } else {\n          // has multiple cells selected\n          onShowContextMenu({\n            left: e.pageX,\n            top: e.pageY,\n            type: ContextMenuType.MULTIPLE_CELL,\n          });\n        }\n      }\n    },\n    [selection.cells, onShowContextMenu]\n  );\n\n  useEffect(() => {\n    // hanle mouseup event when mouse out of table area\n    const handleMouseUp = () => {\n      if (selectingStateRef.current.flag) {\n        selectingStateRef.current.flag = false;\n      }\n    };\n    document.addEventListener('mouseup', handleMouseUp);\n    return () => {\n      document.removeEventListener('mouseup', handleMouseUp);\n    };\n  }, []);\n\n  return (\n    <table\n      className=\"sheet-table\"\n      style={{\n        width: tableWidth,\n      }}\n      onMouseDown={handleMouseDownOnTable}\n      onMouseUp={handleMouseUpOnTable}\n      onMouseMove={handleMouseMoveOnTable}\n      onContextMenu={handleContextMenuOnTable}\n    >\n      <colgroup>\n        {layout.cols.map((col, colIdx) => (\n          <col key={colIdx} style={{ width: col.width }} />\n        ))}\n      </colgroup>\n      <tbody>\n        {cells.length\n          ? layout.rows.map((row, rowIdx) => (\n              <tr key={rowIdx} style={{ height: row.height }}>\n                {layout.cols.map((col, colIdx) => {\n                  const cellItem = cells[rowIdx][colIdx];\n                  if (cellItem && cellItem.type === CellType.NORMAL) {\n                    return (\n                      <Cell\n                        key={colIdx}\n                        cell={cellItem}\n                        selected={\n                          selection.cells != null &&\n                          isCellSelected(cellItem, selection.cells)\n                        }\n                        raw={cellItem.raw as string}\n                      />\n                    );\n                  } else {\n                    return null;\n                  }\n                })}\n              </tr>\n            ))\n          : null}\n      </tbody>\n    </table>\n  );\n};\n\nexport default memo(SheetTable);\n","import React, { memo, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { RootState } from '../store';\n\nimport SheetTable from '../components/sheet-table';\nimport { CellSelectedState } from '../types';\nimport { selectCells } from '../store/slices/selection';\nimport { show as showContextMenu } from '../store/slices/contextMenu';\nimport { ContextMenuType } from '../components/context-menu';\n\nconst SheetTableContainer = () => {\n  const dispatch = useDispatch();\n  const tableWidth = useSelector((state: RootState) =>\n    state.layout.cols.map((e) => e.width).reduce((sum, v) => sum + v, 0)\n  );\n  const layout = useSelector((state: RootState) => state.layout);\n  const cells = useSelector((state: RootState) => state.cells);\n\n  const selection = useSelector((state: RootState) => state.selection);\n\n  const onSelectCells = useCallback(\n    (state: CellSelectedState) => {\n      dispatch(selectCells(state));\n    },\n    [dispatch]\n  );\n\n  const onShowContextMenu = useCallback(\n    (opts: { type: ContextMenuType; top: number; left: number }) => {\n      dispatch(showContextMenu(opts));\n    },\n    [dispatch]\n  );\n\n  return (\n    <SheetTable\n      selection={selection}\n      cells={cells}\n      tableWidth={tableWidth}\n      layout={layout}\n      onSelectCells={onSelectCells}\n      onShowContextMenu={onShowContextMenu}\n    />\n  );\n};\n\nexport default memo(SheetTableContainer);\n","import React, { useEffect } from 'react';\nimport { Provider, useDispatch } from 'react-redux';\n\nimport { setLayout } from './store/slices/layout';\n\nimport store from './store';\n\nimport { getDefaultSheetData, parseSheetData } from './utils';\n\nimport RowHeaderContainer from './components/row-header-container';\nimport ColHeaderContainer from './components/col-header-container';\n\nimport { setCells } from './store/slices/cells';\n\nimport ContextMenu from './containers/context-menu';\nimport SheetOverlay from './containers/overlay';\nimport SheetTable from './containers/sheet-table';\n\nimport './style.scss';\n\nconst SHEET_DATA = getDefaultSheetData();\n\nconst SimpleSheet = (props) => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(setCells(parseSheetData(SHEET_DATA)));\n    dispatch(setLayout(SHEET_DATA.layout));\n  }, [dispatch]);\n\n  return (\n    <div className=\"sheet-container\">\n      <div className=\"sheet-header\"></div>\n      <RowHeaderContainer />\n      <ColHeaderContainer />\n      <ContextMenu />\n      <SheetOverlay />\n      <SheetTable />\n    </div>\n  );\n};\nconst SimpleSheetWithStore = () => {\n  return (\n    <Provider store={store}>\n      <SimpleSheet />\n    </Provider>\n  );\n};\n\nexport default SimpleSheetWithStore;\n","import React from 'react';\nimport './app.css';\n\nimport SimpleSheet from './components/simple-sheet';\n\nfunction App() {\n  return (\n    <div id=\"app\">\n      <SimpleSheet />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}